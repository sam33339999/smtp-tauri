name: 'publish'

on:
  push:
    branches:
      - release

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy: # 多種策略
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # MacOS on Apple Silicon. (Arm(M1) 芯片)
            args: '--target aarch64-apple-darwin'
            short_name: 'darwin-arm64'
          - platform: 'macos-latest' # MacOS on Intel. (x86_64)
            args: '--target x86_64-apple-darwin'
            short_name: 'darwin-amd64'
          - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ''
            short_name: 'linux-x64'
          - platform: 'windows-latest'
            args: ''
            short_name: 'win-x64'

    # 使用對應流的平台進行編譯
    runs-on: ${{ matrix.platform }}
    steps:
      # 使用 `actions/checkout@v4` checkout 出專案
      - uses: actions/checkout@v4

      # 安裝 nodejs, 並且使用 lts/* 版本
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      # 安裝 Rust 穩定版本
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # 這個目標只有作用在 macos runner 上，所以在 `if` 中可以稍微加快 windows 和 linux 的構建速度。
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # 使用 swatinem/rust-cache@v2 進行緩存
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      # 安裝依賴 (僅限 ubuntu)
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
        # webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
        # You can remove the one that doesn't apply to your app to speed up the workflow a bit.

      # 安裝 pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      # 安裝前端依賴
      - name: install frontend dependencies
        run: pnpm install # change this to npm, pnpm or bun depending on which one you use.

      # 編譯 tauri 專案
      - uses: tauri-apps/tauri-action@v0
        id: tauri_build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          # args: ${{ matrix.target != '' && format('--target {0}', matrix.target) || '' }}

      # 上傳編譯後的檔案(artifact)
      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 移除額外的引號和方括號
          CLEANED_PATHS=$(echo '${{ steps.tauri_build.outputs.artifactPaths }}' | sed 's/^\[//;s/\]$//;s/"//g')
          IFS=',' read -ra ARTIFACT_PATHS <<< "$CLEANED_PATHS"
          for path in "${ARTIFACT_PATHS[@]}"; do
            # 去除路徑前後的空白字符
            path=$(echo "$path" | xargs)
            if [ -f "$path" ]; then
              filename=$(basename "$path")
              echo "Uploading $filename"
              upload_url=$(echo '${{ steps.tauri_build.outputs.releaseUploadUrl }}' | sed 's/{?name,label}//')
              response=$(curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "${upload_url}?name=${filename}" \
                --data-binary "@$path")
              echo "Upload response: $response"
            else
              echo "File not found: $path"
            fi
          done
        shell: bash